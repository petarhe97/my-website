{"version":3,"sources":["assets/Resume_Peter_he.pdf","components/bios.js","components/projects.js","components/resume.js","components/navbar.js","components/main-container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BiosPage","class","style","width","id","src","Component","ProjectsPage","href","target","alt","height","pdfjs","GlobalWorkerOptions","workerSrc","version","ResumePage","file","resumePDF","pageNumber","scale","NavBar","handleSelect","eventKey","props","onViewChange","Navbar","sticky","bg","variant","Brand","Nav","fill","defaultActiveKey","className","onSelect","this","Link","MainContainer","state","displayType","handleViewChange","newView","setState","displayedView","view","role","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.33694755.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Resume_Peter_he.eee550cf.pdf\";","import React, { Component } from 'react';\nimport \"../stylesheets/bios.css\"\n\nclass BiosPage extends Component {\n\n    render() {\n        return(\n            <div class=\"center-block container\">\n                <div class=\"center-block\" style={{width: \"800px\"}}>\n                    <img class=\"img-responsive img-circle center-block\" id=\"bios-photo\" src=\"circle_portrait.png\"/>\n                    <h1 id=\"bios-name\">Peter He</h1>\n                    <p id=\"bios-title\">\n                        Computer Science Student\n                    </p>\n                    <p id=\"bios-title\">\n                        University of Waterloo\n                    </p>\n                    <hr id=\"separator\"/>\n                    <p id=\"bios-body\">\n                        Hello! I'm Peter, a recently graduated Computer Science student looking for full time opportunities.\n                    </p>\n                    <p id=\"bios-body\">\n                        My passion for programming started in Highschool where I was able to create a matching game through using a Pascal-like language called Turing. <br/>\n                        This made me realize my interest in bringing ideas into existence, and I thought programming was the perfect medium for doing so.<br/> Even until this day, my first and foremost hope is to \n                            make sure the products and features I ship out are something I can be proud of, easy to be maintained, and desired by its users.\n                    </p>\n                    <p id=\"bios-body\">\n                            Before my graduation at University of Waterloo, I had the opportunity to work at companies such as Lifion by ADP, TribalScale, and Flipp Corp. <br/>These internships allowed me to\n                            have an in-depth understanding of backend development and introduced me to mobile development as well. <br/>Some languages I have worked with include Golang,\n                            Javascript, Python, Java and Kotlin.\n                    </p>\n                    <p id=\"bios-body\">\n                            To learn more about my previous experiences and qualifications, please visit my projects and resume pages.\n                    </p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BiosPage","import React, { Component } from 'react';\nimport \"../stylesheets/projects.css\"\n\nclass ProjectsPage extends Component {\n\n\n    render() {\n        return(\n            <div id=\"project-cards-container\">\n                <div class=\"card-deck\">\n                    <div class=\"card mb-3 shadow\">\n                        <div class=\"card-header\"><h5>Input sorting WebApp</h5></div>\n                        <div class=\"card-body\">\n                            <p class=\"card-text\">\n                                Simple sorting react webapp with a node.js backend that takes either integral or text values as input, sends request to backend and returns steps of sorting back.\n                                Steps of sorting are also stored in a SQLite database as they are being sorted.\n                            </p>\n                        </div>\n                        <div class=\"card-footer\">\n                        <a href=\"https://github.com/petarhe97/sortingApp\" target=\"_blank\" id=\"image-button\"><img src=\"/GitHub.png\"/></a>\n                        </div>\n                    </div>\n  \n                    <div class=\"card mb-3 shadow\">\n                        <img class=\"card-img-top\" src=\"/rpg.png\" alt=\"Card image cap\" height=\"400px\"/>\n                        <div class=\"card-header\"><h5>2D Tactical Game</h5></div>\n                        <div class=\"card-body\">\n                            <p class=\"card-text\">\n                                Turn-based tactical RPG developed in Java that brings you the adventure of a hero who fights against enemies of the Kingdom. Made as a small project with\n                                3 other friends, where I was mainly responsible for the object oriented design, procedurally generated item system, and most of the character class\n                                creation. \n                            </p>\n                        </div>\n                        <div class=\"card-footer\">\n                        <a href=\"https://github.com/petarhe97/Dongerino-Adventures\" target=\"_blank\" id=\"image-button\"><img src=\"/GitHub.png\"/></a>\n                        </div>\n                    </div>\n  \n                    <div class=\"card mb-3 shadow\">\n                        <img class=\"card-img-top\" src=\"/website-icon.png\" alt=\"Card image cap\" height=\"400px\"/>\n                        <div class=\"card-header\"><h5>Personal Website</h5></div>\n                        <div class=\"card-body\">\n                            <p class=\"card-text\">\n                                The ongoing personal website project where the result is this website. Currently the website is built mainly as a react webapp with bootstrap for some\n                                customized CSS for styling.\n                            </p>\n                        </div>\n                        <div class=\"card-footer\">\n                        <a href=\"https://github.com/petarhe97/petarhe97.github.io\" target=\"_blank\" id=\"image-button\"><img src=\"/GitHub.png\"/></a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ProjectsPage","import React, { Component } from 'react';\nimport { pdfjs, Document, Page } from 'react-pdf';\nimport resumePDF from '../assets/Resume_Peter_he.pdf'\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nclass ResumePage extends Component {\n\n    render() {\n        return(\n            <Document file={resumePDF}>\n                <Page pageNumber={1} scale=\"1.7\"/>\n            </Document>\n        )\n    }\n}\n\nexport default ResumePage","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport \"../stylesheets/navbar.css\"\n\nclass NavBar extends Component {\n\n    handleSelect = (eventKey) => {\n        this.props.onViewChange(eventKey)\n    }\n\n    render() {\n        return(\n            <Navbar sticky=\"top\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"/\">Peter He</Navbar.Brand>\n                <Nav fill variant=\"pills\" defaultActiveKey=\"bios\" className=\"ml-auto\" onSelect={this.handleSelect}>\n                        <Nav.Link id=\"pagelink\" eventKey=\"bios\">Bios</Nav.Link>\n                        <Nav.Link id=\"pagelink\" eventKey=\"projects\">Projects</Nav.Link>\n                        <Nav.Link id=\"pagelink\" eventKey=\"resume\">Resume</Nav.Link>\n                </Nav>\n            </Navbar>\n        )\n    }\n}\n\nexport default NavBar","import React, { Component } from 'react';\nimport BiosPage from './bios';\nimport ProjectsPage from './projects';\nimport ResumePage from './resume';\nimport NavBar from './navbar'\nimport '../App.css';\n\nclass MainContainer extends Component {\n    state = {\n        displayType: 'bios'\n    }\n    \n    handleViewChange = newView => {\n        this.setState({ displayType: newView })\n    }\n\n    render() {\n        const view = this.state.displayType\n        let displayedView;\n        if (view == 'bios') {\n            displayedView = <BiosPage/>\n        } else if (view == 'projects') {\n            displayedView = <ProjectsPage/>\n        } else {\n            displayedView = <ResumePage/>\n        }\n\n        return(\n            <div className=\"App\">\n                    <NavBar onViewChange={this.handleViewChange}/>\n                    <div className=\"App-container\">\n                        <main role=\"main\">\n                             <div>\n                                   {displayedView}\n                             </div>\n                        </main>  \n                    </div>\n            </div>\n        )\n    }\n}\n\nexport default MainContainer","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport MainContainer from './components/main-container';\n\nfunction App() {\n\n\n  return (\n      <MainContainer/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}